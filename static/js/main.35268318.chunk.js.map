{"version":3,"sources":["Card.tsx","Results.tsx","Message.ts","Selection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","children","color","onClick","size","className","style","width","height","flex","justifyContent","alignItems","margin","background","display","MessageType","Results","ownId","users","disclose","Object","keys","filter","key","value","length","isOwnResult","extendedUsers","map","sort","user1","user2","value1","parseInt","isNaN","value2","minResult","maxResult","extendedUser","isMin","isMax","undefined","padding","name","fontSize","values","Selection","currentSelection","Uuid","format","sendData","socket","data","type","CurrentValue","clientId","send","JSON","stringify","addUrlProps","mapUrlToProps","url","room","useState","loading","setLoading","localStorage","getItem","setUsers","useMemo","WebSocket","setData","useCallback","reset","_","toPairs","reduce","newUsers","user","useEffect","window","onunload","Leave","onopen","RequestCurrentValue","onmessage","event","message","parse","Reset","onclose","flexDirection","marginLeft","onChange","target","setItem","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35268318.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport { Color } from 'csstype';\n\ninterface IProps {\n  children: ReactElement;\n  color?: Color;\n  onClick?: () => void;\n  size?: number;\n}\n\nexport const Card = ({ children, color, onClick, size }: IProps) => (\n  <div\n    className=\"card\"\n    style={{\n      width: size || 150,\n      height: size || 150,\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      // overflow: 'hidden',\n      margin: 8,\n      background: color ? color : '#fff',\n      display: 'inline-block',\n    }}\n    onClick={onClick}\n  >\n    {children}\n  </div>\n);\n","import React from \"react\";\nimport { Users } from \"./User\";\nimport { Card } from \"./Card\";\n\ninterface IProps {\n  ownId: string;\n  users: Users;\n}\n\nexport const Results = ({ ownId, users }: IProps) => {\n  const numberOfFinishedUsers = Object.keys(users).filter(\n    key => !!users[key] && !!users[key].value\n  ).length;\n  const totalNumberOfUsers = Object.keys(users).length;\n  const disclose = numberOfFinishedUsers === totalNumberOfUsers;\n  const isOwnResult = (key: string) => {\n    return key === ownId;\n  };\n\n  const getValue = (key: string) => {\n    if (!users || !users[key] || users[key].value === undefined) {\n      return \"_\";\n    }\n\n    if (isOwnResult(key)) {\n      return users[key].value;\n    }\n\n    return disclose ? users[key].value : \"?\";\n  };\n\n  const extendedUsers = Object.keys(users)\n    .map(key => ({ ...users[key], key }))\n    .sort((user1, user2) => {\n      if (!user1.value) return -1;\n\n      if (!user2.value) return 1;\n\n      const value1 = parseInt(user1.value);\n      if (isNaN(value1)) return 1;\n\n      const value2 = parseInt(user2.value);\n      if (isNaN(value2)) return -1;\n\n      return value1 - value2;\n    });\n\n  const minResult = extendedUsers[0].value;\n  const maxResult = extendedUsers[extendedUsers.length - 1].value;\n\n  return (\n    <div>\n      {extendedUsers.map(extendedUser => {\n        const isMin = extendedUser.value === minResult;\n        const isMax = extendedUser.value === maxResult;\n\n        return (\n          <Card\n            key={extendedUser.key}\n            color={isOwnResult(extendedUser.key) ? \"#c3f7f7\" : undefined}\n          >\n            <div>\n              <div style={{ padding: 16 }}>{extendedUser.name}</div>\n              <div\n                style={{\n                  fontSize: 80,\n                  color: disclose && (isMin || isMax) ? \"red\" : \"black\"\n                }}\n              >\n                {getValue(extendedUser.key)}\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n","export enum MessageType {\n  CurrentValue = 'current_value',\n  Leave = 'leave',\n  RequestCurrentValue = 'request_current_value',\n  Reset = 'reset',\n}\n\nexport interface RequestCurrentValue {\n  type: MessageType.RequestCurrentValue;\n}\n\nexport interface CurrentValue {\n  type: MessageType.CurrentValue;\n  clientId: string;\n  name: string;\n  value: string | undefined;\n}\n\nexport interface Reset {\n  type: MessageType.Reset;\n}\n\nexport interface Leave {\n  type: MessageType.Leave;\n  clientId: string;\n}\n\nexport type Message = RequestCurrentValue | CurrentValue | Reset | Leave;\n","import React from 'react';\nimport { Card } from './Card';\n\nconst values = [\n  { value: '0', color: '#fff' },\n  { value: '1', color: '#afa' },\n  { value: '2', color: '#5f5' },\n  { value: '3', color: 'yellow' },\n  { value: '5', color: 'orange' },\n  { value: '8', color: 'red' },\n  { value: '13', color: 'violet' },\n  { value: '20', color: '#bbb' },\n  { value: 'ðŸ¤”', color: '#fff' },\n];\n\ninterface IProps {\n  currentSelection: string | undefined;\n  onClick: (value: string | undefined) => void;\n}\n\nexport const Selection = ({ currentSelection, onClick }: IProps) => (\n  <div>\n    {values.map(({ value, color }) => (\n      <Card\n        key={value}\n        color={\n          currentSelection\n            ? currentSelection === value\n              ? color\n              : 'white'\n            : color\n        }\n        size={50}\n        onClick={() => onClick(value)}\n      >\n        <div style={{ fontSize: 35 }}>{value}</div>\n      </Card>\n    ))}\n  </div>\n);\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport './App.css';\nimport { Users } from './User';\nimport { Results } from './Results';\nimport { Selection } from './Selection';\nimport Uuid from 'pure-uuid';\nimport { MessageType, CurrentValue } from './Message';\nimport _ from 'lodash';\nimport { addUrlProps } from 'react-url-query';\n\nconst ownId = new Uuid(4).format();\n\nconst mapUrlToProps = (url: any) => {\n  return {\n    room: url.room,\n  };\n};\n\nconst sendData = (\n  socket: WebSocket,\n  name: string,\n  value: string | undefined,\n) => {\n  const data: CurrentValue = {\n    type: MessageType.CurrentValue,\n    clientId: ownId,\n    name,\n    value,\n  };\n  socket.send(JSON.stringify(data));\n};\n\ninterface IProps {\n  room: string;\n}\n\nconst App: React.FC<IProps> = ({ room = 'default' }: IProps) => {\n  const [loading, setLoading] = useState(true);\n  const [users, setUsers] = useState<Users>({\n    [ownId]: {\n      name: localStorage.getItem('name') || '',\n      value: undefined,\n    },\n  });\n\n  const { name, value } = users[ownId];\n\n  const socket = useMemo(\n    () =>\n      new WebSocket(\n        `wss://connect.websocket.in/PlanningPokerApp?room_id=${room}`,\n      ),\n    [room],\n  );\n\n  const setData = useCallback(\n    (name: string, value: string | undefined) => {\n      sendData(socket, name, value);\n      setUsers(users => ({ ...users, [ownId]: { name, value } }));\n    },\n    [socket],\n  );\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    const name = event.target.value;\n    localStorage.setItem('name', name);\n    setData(name, value);\n  };\n\n  const reset = () => {\n    setUsers(users =>\n      _(users)\n        .toPairs()\n        .reduce(\n          (newUsers, [key, user]) => ({\n            ...newUsers,\n            [key]: { ...user, value: undefined },\n          }),\n          {},\n        ),\n    );\n  };\n\n  useEffect(() => {\n    window.onunload = () => {\n      socket.send(\n        JSON.stringify({\n          type: MessageType.Leave,\n          clientId: ownId,\n        }),\n      );\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    socket.onopen = () => {\n      setLoading(false);\n      socket.send(\n        JSON.stringify({\n          type: MessageType.RequestCurrentValue,\n        }),\n      );\n      sendData(socket, name, value);\n    };\n\n    socket.onmessage = event => {\n      const message = JSON.parse(event.data);\n\n      if (!message.type) return;\n\n      switch (message.type) {\n        case MessageType.CurrentValue: {\n          setUsers(users => ({\n            ...users,\n            [message.clientId]: { name: message.name, value: message.value },\n          }));\n          break;\n        }\n        case MessageType.Leave: {\n          const clientId = message.clientId;\n          const userPairs = _(users)\n            .toPairs()\n            .filter(([key]) => key !== clientId);\n          const newUsers = userPairs.reduce(\n            (newUsers, [key, user]) => ({\n              ...newUsers,\n              [key]: { ...user, value: undefined },\n            }),\n            {},\n          );\n          setUsers(newUsers);\n          break;\n        }\n        case MessageType.RequestCurrentValue: {\n          sendData(socket, name, value);\n          break;\n        }\n        case MessageType.Reset: {\n          reset();\n          break;\n        }\n        default:\n          return;\n      }\n    };\n\n    socket.onclose = event => {};\n  }, [name, socket, users, value]);\n\n  if (loading) return <header>Loading ...</header>;\n\n  return (\n    <div className=\"App\">\n      <div style={{ flexDirection: 'row', margin: 16 }}>\n        <label>\n          Dein Name:\n          <input\n            style={{ marginLeft: 16 }}\n            value={name}\n            onChange={handleNameChange}\n          ></input>\n        </label>\n      </div>\n\n      <div>\n        <button\n          onClick={() => {\n            socket.send(JSON.stringify({ type: MessageType.Reset }));\n            reset();\n          }}\n        >\n          Reset\n        </button>\n      </div>\n\n      <Selection\n        currentSelection={value}\n        onClick={value => setData(name, value)}\n      />\n\n      <Results ownId={ownId} users={users} />\n    </div>\n  );\n};\n\nexport default addUrlProps({ mapUrlToProps })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}